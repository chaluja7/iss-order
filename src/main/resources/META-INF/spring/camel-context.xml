<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://www.springframework.org/schema/osgi
         http://www.springframework.org/schema/osgi/spring-osgi-1.2.xsd
         ">

    <camel:sslContextParameters id="sslContextParametersWithoutAuthentication">
        <camel:keyManagers keyPassword="redhat">
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:trustManagers>
    </camel:sslContextParameters>

    <bean id="orderRepository" class="cz.cvut.iss.service.OrderRepository" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <route id="orderHttpsPost">
            <from uri="restlet:https://localhost:8081/orders?restletMethod=post&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />

            <onException>
                <exception>java.io.IOException</exception>
                <exception>org.apache.camel.InvalidPayloadException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>

            <convertBodyTo type="java.lang.String" />
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cz.cvut.iss.model.Order" />
            </unmarshal>
            <to uri="direct:new-order"/>
        </route>

        <route id="orderHttpsGet">
            <from uri="restlet:https://localhost:8081/orders/{orderId}?restletMethod=get&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />
            <to uri="direct:find-order"/>
        </route>

        <route id="new-order">
            <from uri="direct:new-order" />

            <onException>
                <exception>cz.cvut.iss.exception.BadOrderBodyException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>

            <to uri="bean:orderRepository?method=create" />
            <setHeader headerName="CamelHttpResponseCode">
                <constant>201</constant>
            </setHeader>
            <setHeader headerName="Location">
                <simple>/orders/${body}</simple>
            </setHeader>
            <setBody>
                <constant>null</constant>
            </setBody>

            <to uri="jmstx:queue:masterslave" />

        </route>

        <route id="find-order">
            <from uri="direct:find-order" />
            <onException>
                <exception>cz.cvut.iss.exception.NoSuchOrderException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>404</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>
            <to uri="bean:orderRepository?method=get" />
            <marshal><json library="Jackson" /></marshal>
        </route>

        <route id="soap-find-order">
            <from uri="direct:soap-find-order" />
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>
            <to uri="bean:orderRepository?method=get" />
        </route>

        <route id="soap-new-order">
            <from uri="direct:soap-new-order" />
            <to uri="bean:orderRepository?method=create" />
        </route>

        <route id="cxf-order-ws">
            <from uri="cxf:bean:order-ws"/>
            <choice>
                <when>
                    <simple>${in.header.operationName} == 'get'</simple>
                    <setHeader headerName="orderId">
                        <simple>${body[0]}</simple>
                    </setHeader>
                    <to uri="direct:soap-find-order" />
                </when>
                <when>
                    <simple>${in.header.operationName} == 'create'</simple>
                    <to uri="direct:soap-new-order"/>
                </when>
            </choice>

        </route>

        <!-- brigeEndpoint na soap sluzbu objednavka s vyuzitim sslContextParametersWithoutAuthentication -->
        <route id="ssl-soap-bridge">
            <from uri="jetty:https://localhost:9181/orderApplication?sslContextParametersRef=#sslContextParametersWithoutAuthentication&amp;matchOnUriPrefix=true"/>
            <to uri="http://localhost:9083/orderApplication?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
        </route>

    </camelContext>

    <cxf:cxfEndpoint id="order-ws" address="http://localhost:9083/orderApplication/order"
                     publishedEndpointUrl="https://localhost:9181/orderApplication/order"
                     serviceClass="cz.cvut.iss.service.OrderService"
                     endpointName="ws:OrderServicePort"
                     serviceName="ws:OrderService"
                     xmlns:ws="http://cz.cvut.order.endpoint"/>


    <!--Mozne nastaveni pouziti ssl primo na cxf endpoint, bez bridgeEndpointu-->
    <!--<http:conduit name="{http://www.company.com/product/orderApplication/service/1}OrderApplication.http-conduit">-->
        <!--<http:tlsClientParameters disableCNCheck="true">-->
            <!--<sec:trustManagers>-->
                <!--<sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>-->
            <!--</sec:trustManagers>-->
            <!--<sec:cipherSuitesFilter>-->
                <!--<sec:include>.*_EXPORT_.*</sec:include>-->
                <!--<sec:include>.*_EXPORT1024_.*</sec:include>-->
                <!--<sec:include>.*_WITH_DES_.*</sec:include>-->
                <!--<sec:include>.*_WITH_NULL_.*</sec:include>-->
                <!--<sec:exclude>.*_DH_anon_.*</sec:exclude>-->
            <!--</sec:cipherSuitesFilter>-->
        <!--</http:tlsClientParameters>-->
    <!--</http:conduit>-->

    <!-- XA transakce -->

    <!--
        OSGi TM Service
    -->
    <!-- access through Spring's PlatformTransactionManager -->
    <osgi:service id="osgiPlatformTransactionManager"
               interface="org.springframework.transaction.PlatformTransactionManager"/>

    <!-- access through PlatformTransactionManager -->
    <osgi:service id="osgiJtaTransactionManager"
               interface="javax.transaction.TransactionManager"/>

    <!--
        JMS TX endpoint configuration
    -->
    <bean id="jmstx"
          class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsTxConfig" />
    </bean>

    <bean id="jmsTxConfig"
          class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="jmsXaPoolConnectionFactory"/>
        <property name="transactionManager" ref="osgiPlatformTransactionManager"/>
        <property name="transacted" value="false"/>
        <property name="cacheLevelName" value="CACHE_CONNECTION"/>
    </bean>

    <!-- connection factory wrapper to support auto-enlisting of XA resource -->
    <bean id="jmsXaPoolConnectionFactory"
          class="org.apache.activemq.pool.JcaPooledConnectionFactory">
        <property name="name" value="MyXaResourceName" />
        <property name="maxConnections" value="1" />
        <property name="connectionFactory" ref="jmsXaConnectionFactory" />
        <property name="transactionManager" ref="osgiJtaTransactionManager" />
    </bean>

    <bean id="jmsXaConnectionFactory"
          class="org.apache.activemq.ActiveMQXAConnectionFactory">
        <property name="brokerURL" value="discovery:(fabric:masterslave)"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="redeliveryPolicy">
            <bean class="org.apache.activemq.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="0"/>
            </bean>
        </property>
    </bean>

    <!--
        ActiveMQ XA Resource Manager
    -->
    <bean id="resourceManager"
          class="org.apache.activemq.pool.ActiveMQResourceManager"
          init-method="recoverResource">
        <property name="transactionManager" ref="osgiJtaTransactionManager" />
        <property name="connectionFactory" ref="jmsXaPoolConnectionFactory" />
        <property name="resourceName" value="activemq.default" />
    </bean>ยง

</beans>
