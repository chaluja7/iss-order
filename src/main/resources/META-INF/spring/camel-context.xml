<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">

    <camel:sslContextParameters id="sslContextParametersWithoutAuthentication">
        <camel:keyManagers keyPassword="redhat">
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:trustManagers>
    </camel:sslContextParameters>

    <bean id="orderRepository" class="cz.cvut.iss.service.OrderRepository" />
    <bean id="orderStatusProvider" class="cz.cvut.iss.service.OrderStatusProvider">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="supplierAService" class="cz.cvut.iss.service.SupplierAService">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="supplierBService" class="cz.cvut.iss.service.SupplierBService">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="exchangeProcessor" class="cz.cvut.iss.processor.ExchangeProcessor" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <route id="orderHttpsPost">
            <from uri="restlet:https://localhost:8081/orders?restletMethod=post&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />

            <onException>
                <exception>java.io.IOException</exception>
                <exception>org.apache.camel.InvalidPayloadException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>

            <convertBodyTo type="java.lang.String" />
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cz.cvut.iss.model.Order" />
            </unmarshal>
            <to uri="direct:new-order"/>
        </route>

        <route id="orderHttpsGet">
            <from uri="restlet:https://localhost:8081/orders/{orderId}?restletMethod=get&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />
            <to uri="direct:find-order"/>
        </route>

        <route id="new-order">
            <from uri="direct:new-order" />
            <bean ref="exchangeProcessor" method="handleVipHeader"/>
            <log message="VIP: ${header.X-Els-Vip}"/>
            <onException>
                <exception>cz.cvut.iss.exception.BadOrderBodyException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>

            <to uri="bean:orderRepository?method=create" />
            <setProperty propertyName="orderId">
                <simple>${body}</simple>
            </setProperty>
            <to uri="bean:orderStatusProvider?method=inProcess" />

            <!--dotazy na externi sklady-->
            <!--ziskam udaje o cene itemu -->
            <to uri="bean:orderRepository?method=get" />
            <setProperty propertyName="orderItemsCount">
                <simple>${body.item.count}</simple>
            </setProperty>
            <setProperty propertyName="itemPrice">
                <simple>${body.item.unitPrice}</simple>
            </setProperty>
            <log message="items count - ${property.orderItemsCount}"/>
            <log message="item price - ${property.itemPrice}"/>

            <removeHeaders pattern="*"/>

            <!--SUPPLIER A-->
            <to uri="bean:supplierAService?method=getAvailableRequest" />
            <to uri="cxf:bean:supplier-a-ws"/>
            <log message="response supplierA - ${body[0]}"/>

            <setProperty propertyName="supplierAItemPrice">
                <constant>null</constant>
            </setProperty>
            <log message="SupplierA item price before: ${property.supplierAItemPrice}" />
            <choice>
                <when>
                    <simple>${body[0].available}</simple>
                    <setProperty propertyName="supplierAItemPrice">
                        <simple>${body[0].price.longValue}</simple>
                    </setProperty>
                </when>
            </choice>
            <log message="SupplierA item price after: ${property.supplierAItemPrice}" />

            <!--SUPPLIER B-->
            <to uri="bean:supplierBService?method=getAvailableRequest" />
            <to uri="cxf:bean:supplier-b-ws"/>
            <log message="response supplierB - ${body[0]}"/>

            <setProperty propertyName="supplierBItemPrice">
                <constant>null</constant>
            </setProperty>
            <log message="SupplierB item price before: ${property.supplierBItemPrice}" />
            <choice>
                <when>
                    <simple>${body[0].available}</simple>
                    <setProperty propertyName="supplierBItemPrice">
                        <simple>${body[0].price.longValue}</simple>
                    </setProperty>
                </when>
            </choice>
            <log message="SupplierB item price after: ${property.supplierBItemPrice}" />
            <!--END dotazy na externi sklady-->


            <!--ACCOUNTING-->
            <to uri="bean:orderRepository?method=getForAccounting" />
            <marshal>
                <json library="Jackson"/>
            </marshal>
            <setHeader headerName="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <to uri="https4://localhost:8443/accounting/rest/accounting/invoice/issue?sslContextParameters=#sslContextParametersWithoutAuthentication"/>
            <removeHeaders pattern="*"/><!-- important, wont work if missing -->
            <convertBodyTo type="java.lang.String"/>
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cz.cvut.iss.model.Invoice"/>
            </unmarshal>
            <choice>
                <when>
                    <simple>${body.status} == 'ISSUED'</simple>
                    <to uri="bean:orderStatusProvider?method=account"/>
                    <setProperty propertyName="orderTotalPrice">
                        <simple>${body.order.totalPrice}</simple>
                    </setProperty>
                    <to uri="bean:orderRepository?method=setTotalPrice"/>
                    <setHeader headerName="CamelHttpResponseCode">
                        <constant>201</constant>
                    </setHeader>
                    <log message="Accounting complete - total price: ${body.order.totalPrice}" />
                </when>
                <otherwise>
                    <to uri="bean:orderStatusProvider?method=cancel"/>
                    <setHeader headerName="CamelHttpResponseCode">
                        <constant>406</constant>
                    </setHeader>
                </otherwise>
            </choice>
            <setHeader headerName="Location">
                <simple>/orders/${property.orderId}</simple>
            </setHeader>
            <setBody>
                <constant>null</constant>
            </setBody>
        </route>

        <route id="find-order">
            <from uri="direct:find-order"/>
            <onException>
                <exception>cz.cvut.iss.exception.NoSuchOrderException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>404</constant>
                </setHeader>
                <setBody>
                    <constant>null</constant>
                </setBody>
            </onException>
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>
            <to uri="bean:orderRepository?method=get"/>
            <marshal>
                <json library="Jackson"/>
            </marshal>
        </route>

        <route id="soap-find-order">
            <from uri="direct:soap-find-order"/>
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>
            <to uri="bean:orderRepository?method=get"/>
        </route>

        <route id="soap-new-order">
            <from uri="direct:soap-new-order"/>
            <to uri="bean:orderRepository?method=create"/>
            <setProperty propertyName="orderId">
                <simple>${body}</simple>
            </setProperty>
            <to uri="bean:orderStatusProvider?method=inProcess"/>
        </route>

        <route id="cxf-order-ws">
            <from uri="cxf:bean:order-ws"/>
            <choice>
                <when>
                    <simple>${in.header.operationName} == 'get'</simple>
                    <setHeader headerName="orderId">
                        <simple>${body[0]}</simple>
                    </setHeader>
                    <to uri="direct:soap-find-order"/>
                </when>
                <when>
                    <simple>${in.header.operationName} == 'create'</simple>
                    <to uri="direct:soap-new-order"/>
                </when>
            </choice>

        </route>

        <!-- brigeEndpoint na soap sluzbu objednavka s vyuzitim sslContextParametersWithoutAuthentication -->
        <route id="ssl-soap-bridge">
            <from uri="jetty:https://localhost:9181/orderApplication?sslContextParametersRef=#sslContextParametersWithoutAuthentication&amp;matchOnUriPrefix=true"/>
            <to uri="http://localhost:9083/orderApplication?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
        </route>

    </camelContext>

    <cxf:cxfEndpoint id="order-ws" address="http://localhost:9083/orderApplication/order"
                     publishedEndpointUrl="https://localhost:9181/orderApplication/order"
                     serviceClass="cz.cvut.iss.service.OrderService"
                     endpointName="ws:OrderServicePort"
                     serviceName="ws:OrderService"
                     xmlns:ws="http://cz.cvut.order.endpoint"/>

    <cxf:cxfEndpoint id="supplier-a-ws" address="https://localhost:8443/supplier-a/SupplierAService"
                     serviceClass="cz.cvut.iss.generated.supplierA.SupplierA"
                     endpointName="ssp:SupplierAPort"
                     serviceName="ssp:SupplierA"
                     xmlns:ssp="http://cz.cvut.supplier/supplierAApplication/service/1"/>

    <cxf:cxfEndpoint id="supplier-b-ws" address="https://localhost:8443/supplier-b/SupplierBService"
                     serviceClass="cz.cvut.iss.generated.supplierB.SupplierB"
                     endpointName="ssp:SupplierBPort"
                     serviceName="ssp:SupplierB"
                     xmlns:ssp="http://cz.cvut.supplier/supplierBApplication/service/1"/>


    <!--Mozne nastaveni pouziti ssl primo na cxf endpoint, bez bridgeEndpointu-->
    <http:conduit name="{http://cz.cvut.supplier/supplierAApplication/service/1}SupplierAPort.http-conduit">
        <http:tlsClientParameters disableCNCheck="true">
            <sec:trustManagers>
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:trustManagers>
        </http:tlsClientParameters>
        <http:authorization>
            <sec:UserName>webuser</sec:UserName>
            <sec:Password>JBoss.123</sec:Password>
            <sec:AuthorizationType>Basic</sec:AuthorizationType>
        </http:authorization>
    </http:conduit>

    <http:conduit name="{http://cz.cvut.supplier/supplierBApplication/service/1}SupplierBPort.http-conduit">
        <http:tlsClientParameters disableCNCheck="true">
            <sec:trustManagers>
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:trustManagers>
            <sec:keyManagers keyPassword="redhat">
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:keyManagers>
        </http:tlsClientParameters>
    </http:conduit>

</beans>
