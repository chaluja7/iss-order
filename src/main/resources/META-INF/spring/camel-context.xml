<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">

    <camel:sslContextParameters id="sslContextParametersWithoutAuthentication">
        <camel:keyManagers keyPassword="redhat">
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore type="JKS" resource="${location.keystore}keystore.jks" password="redhat" />
        </camel:trustManagers>
    </camel:sslContextParameters>

    <bean id="itemRepository" class="cz.cvut.iss.service.ItemRepository" />
    <bean id="orderRepository" class="cz.cvut.iss.service.OrderRepository">
        <property name="itemRepository" ref="itemRepository" />
    </bean>
    <bean id="orderStatusProvider" class="cz.cvut.iss.service.OrderStatusProvider">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="supplierAService" class="cz.cvut.iss.service.SupplierAService">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="supplierBService" class="cz.cvut.iss.service.SupplierBService">
        <property name="orderRepository" ref="orderRepository" />
    </bean>
    <bean id="vipHeaderProcessor" class="cz.cvut.iss.processor.VipHeaderProcessor" />
    <bean id="accountingResponseException" class="cz.cvut.iss.exception.AccountingResponseException" />
    <bean id="itemUnavailableException" class="cz.cvut.iss.exception.ItemUnavailableException" />
    <bean id="multicastKeepSupplierHeadersStrategy" class="cz.cvut.iss.processor.MulticastKeepSupplierHeadersStrategy" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <!-- use Camel property placeholder loaded from the given file -->
        <propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>

        <!--START nase endpointy-->
        <!--REST GET-->
        <route id="orderRestHttpsGet">
            <from uri="restlet:https://localhost:8081/orders/{orderId}?restletMethod=get&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />
            <setHeader headerName="isRest">
                <constant>true</constant>
            </setHeader>
            <to uri="direct:find-order"/>
        </route>

        <!--REST POST-->
        <route id="orderRestHttpsPost">
            <from uri="restlet:https://localhost:8081/orders?restletMethod=post&amp;sslContextParameters=#sslContextParametersWithoutAuthentication" />

            <!-- pokud zadal spatny json nebo prazdne body requestu -->
            <onException>
                <exception>java.io.IOException</exception>
                <exception>org.apache.camel.InvalidPayloadException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <!-- konverze do objektu Order -->
            <convertBodyTo type="java.lang.String" />
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cz.cvut.iss.model.Order" />
            </unmarshal>

            <setHeader headerName="isRest">
                <constant>true</constant>
            </setHeader>
            <to uri="direct:new-order"/>
        </route>

        <!--SOAP get&create-->
        <route id="cxf-order-ws">
            <from uri="cxf:bean:order-ws"/>
            <choice>
                <when>
                    <simple>${in.header.operationName} == 'get'</simple>
                    <setHeader headerName="orderId">
                        <simple>${body[0]}</simple>
                    </setHeader>
                    <to uri="direct:find-order"/>
                </when>
                <when>
                    <simple>${in.header.operationName} == 'create'</simple>
                    <to uri="direct:new-order"/>
                </when>
            </choice>
        </route>
        <!--END nase endpointy-->

        <!-- GET - najde a vratio objednavku dle id, ktere musi byt v header.orderId -->
        <route id="find-order">
            <from uri="direct:find-order"/>

            <!-- vyjimky chci handlovat pouze pro rest -->
            <onException>
                <!--neexistujici objednavka-->
                <exception>cz.cvut.iss.exception.NoSuchOrderException</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>404</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <onException>
                <!--nezadal id ale nejaky pazmek-->
                <exception>org.apache.camel.TypeConversionException</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <!--vytahnu order dle ID -->
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>
            <to uri="bean:orderRepository?method=get"/>

            <!-- pro rest chci marshallovat pomoci jacksonu -->
            <choice>
                <when>
                    <simple>${header.isRest}</simple>
                    <marshal>
                        <json library="Jackson"/>
                    </marshal>
                </when>
            </choice>
        </route>

        <!--CREATE-->
        <route id="new-order">
            <from uri="direct:new-order" />

            <!-- vyjimky chci handlovat jen pro rest -->
            <onException>
                <exception>cz.cvut.iss.exception.BadOrderBodyException</exception>
                <exception>cz.cvut.iss.exception.NoSuchItemException</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>400</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <onException>
                <exception>cz.cvut.iss.exception.ItemUnavailableException</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>

                <to uri="bean:orderStatusProvider?method=cancel" />
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>403</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <onException>
                <exception>org.springframework.jms.UncategorizedJmsException</exception>
                <continued>
                    <constant>true</constant>
                </continued>
            </onException>

            <onException>
                <exception>java.lang.Exception</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>

                <to uri="bean:orderStatusProvider?method=cancelCauseError" />
                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>500</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <!-- vyhandluju hlavicku VIP - bude v header.X-Els-Vip TODO - co u soapu?-->
            <choice>
                <when>
                    <simple>${header.isRest}</simple>
                    <bean ref="vipHeaderProcessor" method="process"/>
                </when>
            </choice>
            <setProperty propertyName="X-Els-Vip">
                <simple>${header.X-Els-Vip}</simple>
            </setProperty>
            <when>
                <simple>${property.X-Els-Vip} == null</simple>

                <setProperty propertyName="X-Els-Vip">
                    <constant>false</constant>
                </setProperty>
            </when>
            <log message="VIP: ${property.X-Els-Vip}"/>

            <!-- vytvorim objednavku a nastavim propertu property.orderId - Id nove vytvorene objednavky -->
            <to uri="bean:orderRepository?method=create" />
            <setProperty propertyName="orderId">
                <simple>${body}</simple>
            </setProperty>
            <!-- nove objednavce nastavim stav inProcess -->
            <to uri="bean:orderStatusProvider?method=inProcess" />


            <!-- JDBC - dotaz na lokalni sklad -->
            <to uri="bean:orderRepository?method=get" />
            <!-- nastaveni properties, protoze dotaz do DB prepise body -->
            <setProperty propertyName="itemId">
                <simple>${body.item.sku}</simple>
            </setProperty>
            <setProperty propertyName="orderedItemCount">
                <simple>${body.item.count}</simple>
            </setProperty>
            <setProperty propertyName="orderedItemPrice">
                <simple>${body.item.unitPrice}</simple>
            </setProperty>
            <!-- vygeneruje Map pro DB query -->
            <transform>
                <method ref="orderRepository" method="generateOrderItemInfoMap"/>
            </transform>

            <!-- DB NamedQueries v resources/sql.properties -->
            <!-- vysledek query namapuje na outputClass (pouzije dostupne settery podle sloupcu), potreba prazdny konstruktor -->
            <setProperty propertyName="itemAvailableInLocalStore">
                <constant>false</constant>
            </setProperty>
            <to uri="sql:{{sql.getItemForSKU}}?outputClass=cz.cvut.iss.model.OrderItem"/>
            <choice>
                <when>
                    <!-- dostupna OrderItem z DB i vcetne poctu -->
                    <simple>${body} != '[]' &amp;&amp; ${body[0].count} &gt;= ${property.orderedItemCount}</simple>
                    <setProperty propertyName="itemAvailableInLocalStore">
                        <constant>true</constant>
                    </setProperty>
                    <setProperty propertyName="localPricePerItem">
                        <simple>${body[0].unitPrice}</simple>
                    </setProperty>
                    <log message="DB item: ${body[0].sku}, ${body[0].unitPrice}, ${body[0].count} is in DB in sufficient count"/>
                </when>
                <otherwise>
                    <!-- nedostupna OrderItem z DB -->
                    <log message="Item for '${property.itemId}' is not in DB or in unsufficient count."/>
                </otherwise>
            </choice>
            <!-- JDBC end -->
            <log message="Item available locally - ${property.itemAvailableInLocalStore}"/>
            <log message="items count - ${property.orderedItemCount}"/>
            <log message="item price - ${property.orderedItemPrice}"/>

            <!-- musim nastavit orderId do headeru, aby se propagovalo -->
            <setHeader headerName="orderId">
                <simple>${property.orderId}</simple>
            </setHeader>

            <!--START dotazy na externi sklady-->
            <setHeader headerName="supplierAItemPrice">
                <simple>null</simple>
            </setHeader>
            <setHeader headerName="supplierBItemPrice">
                <simple>null</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${property.itemAvailableInLocalStore} == false</simple>

                    <multicast parallelProcessing="true" strategyRef="multicastKeepSupplierHeadersStrategy">
                        <!--SUPPLIER A-->
                        <to uri="direct:supplier-a"/>

                        <!--SUPPLIER B-->
                        <to uri="direct:supplier-b"/>
                    </multicast>

                    <setProperty propertyName="supplierAItemPrice">
                        <simple>${header.supplierAItemPrice}</simple>
                    </setProperty>
                    <setProperty propertyName="supplierBItemPrice">
                        <simple>${header.supplierBItemPrice}</simple>
                    </setProperty>

                    <log message="SupplierA item price after: ${property.supplierAItemPrice}" />
                    <log message="SupplierB item price after: ${property.supplierBItemPrice}" />
                </when>
                <otherwise>
                    <log message="NO NEED to contact external stores"/>
                </otherwise>
            </choice>
            <!--END dotazy na externi sklady-->


            <!--START LOGIKA prodani-->
            <setProperty propertyName="finalPricePerItem">
                <simple>null</simple>
            </setProperty>
            <choice>
                <when>
                    <simple>${property.itemAvailableInLocalStore}</simple>

                    <log message="FINAL price is LOCAL - ${property.localPricePerItem}"/>
                    <setProperty propertyName="finalPricePerItem">
                        <simple>${property.localPricePerItem}</simple>
                    </setProperty>
                </when>
                <when>
                    <simple>${property.supplierAItemPrice} != null &amp;&amp; ${property.supplierBItemPrice} != null</simple>

                    <choice>
                        <when>
                            <simple>${property.supplierAItemPrice} &lt;= ${property.supplierBItemPrice}</simple>

                            <log message="FINAL price is SUPPLIERsA - ${property.supplierAItemPrice}"/>
                            <setProperty propertyName="finalPricePerItem">
                                <simple>${property.supplierAItemPrice}</simple>
                            </setProperty>
                        </when>
                        <otherwise>
                            <log message="FINAL price is SUPPLIERsB - ${property.supplierBItemPrice}"/>
                            <setProperty propertyName="finalPricePerItem">
                                <simple>${property.supplierBItemPrice}</simple>
                            </setProperty>
                        </otherwise>
                    </choice>
                </when>
                <when>
                    <simple>${property.supplierAItemPrice} != null</simple>

                    <log message="FINAL price is SUPPLIERsA - ${property.supplierAItemPrice}"/>
                    <setProperty propertyName="finalPricePerItem">
                        <simple>${property.supplierAItemPrice}</simple>
                    </setProperty>
                </when>
                <when>
                    <simple>${property.supplierBItemPrice} != null</simple>

                    <log message="FINAL price is SUPPLIERsB - ${property.supplierBItemPrice}"/>
                    <setProperty propertyName="finalPricePerItem">
                        <simple>${property.supplierBItemPrice}</simple>
                    </setProperty>
                </when>
            </choice>

            <log message="FINAL PRICE - ${property.finalPricePerItem}"/>
            <!--nedostupne zbozi-->
            <when>
                <simple>${property.finalPricePerItem} == null</simple>

                <throwException ref="itemUnavailableException" />
            </when>

            <!--mame to pouze drazsi, nez si to typek objednal - pro VIP to nechame projit-->
            <when>
                <simple>${property.finalPricePerItem} &gt; ${property.orderedItemPrice} &amp;&amp; ${property.X-Els-Vip} == false</simple>

                <throwException ref="itemUnavailableException" />
            </when>
            <!--END LOGIKA prodani-->


            <!--ACCOUNTING-->
            <to uri="direct:accounting"/>


            <!--EXPEDITION-->
            <transform>
                <simple>ORDER: id: ${property.orderId}; item: '${property.itemId}'; count: ${property.orderedItemCount}; unitPrice: ${property.orderedItemPrice}</simple>
            </transform>
            <to uri="activemq:queue:expedition" pattern="InOnly" />

            <!--SNIZENI STAVU zasob na skladu, pokud byla polozka lokalne k dispozici-->
            <when>
                <simple>${property.itemAvailableInLocalStore}</simple>

                <!-- vygeneruje Map pro DB query -->
                <transform>
                    <method ref="orderRepository" method="generateOrderItemInfoMap"/>
                </transform>

                <!-- decrementuje count u vyrobku o :count -->
                <to uri="sql:{{sql.decrementCountForSKU}}"/>
            </when>

            <!--finalni potvrzeni objednavky-->
            <to uri="bean:orderStatusProvider?method=confirm" />

            <!--FINAL RESPONSE-->
            <choice>
                <when>
                    <simple>${header.isRest}</simple>
                    <removeHeaders pattern="*" />
                    <setHeader headerName="CamelHttpResponseCode">
                        <constant>201</constant>
                    </setHeader>
                    <setHeader headerName="Location">
                        <simple>/orders/${property.orderId}</simple>
                    </setHeader>
                    <setBody>
                        <simple>null</simple>
                    </setBody>
                </when>
                <otherwise>
                    <removeHeaders pattern="*" />
                    <setBody>
                        <simple>${property.orderId}</simple>
                    </setBody>
                </otherwise>
            </choice>
        </route>

        <!--SUPPLIER A-->
        <route id="supplierA">
            <from uri="direct:supplier-a" />

            <onException>
                <exception>java.lang.Exception</exception>
                <continued>
                    <constant>true</constant>
                </continued>
            </onException>

            <!-- musim dostat orderId do property -->
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>

            <!-- pred volanim odstranim hlavicky -->
            <removeHeaders pattern="*" excludePattern="orderId|isRest|supplierAItemPrice|supplierBItemPrice"/>

            <to uri="bean:supplierAService?method=getAvailableRequest" />
            <to uri="cxf:bean:supplier-a-ws"/>
            <log message="response supplierA - ${body[0]}"/>

            <!-- pokud je zbozi dostupne, tak se nasetuje do hlavicky supplierAItemPrice jeho cena (za kus) -->
            <log message="SupplierA item price before: ${header.supplierAItemPrice}" />
            <choice>
                <when>
                    <simple>${body[0].available}</simple>
                    <setHeader headerName="supplierAItemPrice">
                        <simple>${body[0].price.doubleValue}</simple>
                    </setHeader>
                </when>
            </choice>
        </route>

        <!--SUPPLIER B-->
        <route id="supplierB">
            <from uri="direct:supplier-b" />

            <onException>
                <exception>java.lang.Exception</exception>
                <continued>
                    <constant>true</constant>
                </continued>
            </onException>

            <!-- musim dostat orderId do property -->
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>

            <!-- pred volanim odstranim hlavicky -->
            <removeHeaders pattern="*" excludePattern="orderId|isRest|supplierAItemPrice|supplierBItemPrice"/>

            <to uri="bean:supplierBService?method=getAvailableRequest" />
            <to uri="cxf:bean:supplier-b-ws"/>
            <log message="response supplierB - ${body[0]}"/>

            <!-- pokud je zbozi dostupne, tak se nasetuje do hlavicky supplierBItemPrice jeho cena (za kus) -->
            <log message="SupplierB item price before: ${header.supplierBItemPrice}" />
            <choice>
                <when>
                    <simple>${body[0].available}</simple>
                    <setHeader headerName="supplierBItemPrice">
                        <simple>${body[0].price.doubleValue}</simple>
                    </setHeader>
                </when>
            </choice>
        </route>

        <!--ACCOUNTING-->
        <route id="accounting">
            <from uri="direct:accounting" />

            <!-- vyjimky chci handlovat jen pro rest -->
            <onException>
                <exception>java.lang.Exception</exception>
                <handled>
                    <simple>${header.isRest}</simple>
                </handled>

                <to uri="bean:orderStatusProvider?method=cancelCauseAccounting"/>

                <removeHeaders pattern="*" />
                <setHeader headerName="CamelHttpResponseCode">
                    <constant>500</constant>
                </setHeader>
                <setBody>
                    <simple>null</simple>
                </setBody>
            </onException>

            <!-- musim dostat orderId do property -->
            <setProperty propertyName="orderId">
                <simple>${header.orderId}</simple>
            </setProperty>

            <to uri="bean:orderRepository?method=getForAccounting" />
            <marshal>
                <json library="Jackson"/>
            </marshal>

            <removeHeaders pattern="*" excludePattern="orderId|isRest"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>application/json</constant>
            </setHeader>

            <to uri="https4://localhost:8443/accounting/rest/accounting/invoice/issue?sslContextParameters=#sslContextParametersWithoutAuthentication"/>
            <removeHeaders pattern="*" excludePattern="orderId|isRest"/>

            <convertBodyTo type="java.lang.String"/>
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cz.cvut.iss.model.Invoice"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>${body.status} == 'ISSUED'</simple>

                    <to uri="bean:orderStatusProvider?method=account"/>

                    <setProperty propertyName="orderTotalPrice">
                        <simple>${body.order.totalPrice}</simple>
                    </setProperty>

                    <to uri="bean:orderRepository?method=setTotalPrice"/>
                </when>
                <otherwise>
                    <throwException ref="accountingResponseException" />
                </otherwise>
            </choice>

            <log message="Accounting complete - total price: ${body.order.totalPrice}" />
        </route>

        <!-- brigeEndpoint na soap sluzbu objednavka s vyuzitim sslContextParametersWithoutAuthentication -->
        <route id="ssl-soap-bridge">
            <from uri="jetty:https://localhost:9181/orderApplication?sslContextParametersRef=#sslContextParametersWithoutAuthentication&amp;matchOnUriPrefix=true"/>
            <to uri="http://localhost:9083/orderApplication?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
        </route>

    </camelContext>

    <cxf:cxfEndpoint id="order-ws" address="http://localhost:9083/orderApplication/order"
                     publishedEndpointUrl="https://localhost:9181/orderApplication/order"
                     serviceClass="cz.cvut.iss.service.OrderService"
                     endpointName="ws:OrderServicePort"
                     serviceName="ws:OrderService"
                     xmlns:ws="http://cz.cvut.order.endpoint"/>

    <cxf:cxfEndpoint id="supplier-a-ws" address="https://localhost:8443/supplier-a/SupplierAService"
                     serviceClass="cz.cvut.iss.generated.supplierA.SupplierA"
                     endpointName="ssp:SupplierAPort"
                     serviceName="ssp:SupplierA"
                     xmlns:ssp="http://cz.cvut.supplier/supplierAApplication/service/1"/>

    <cxf:cxfEndpoint id="supplier-b-ws" address="https://localhost:8443/supplier-b/SupplierBService"
                     serviceClass="cz.cvut.iss.generated.supplierB.SupplierB"
                     endpointName="ssp:SupplierBPort"
                     serviceName="ssp:SupplierB"
                     xmlns:ssp="http://cz.cvut.supplier/supplierBApplication/service/1"/>

    <http:conduit name="{http://cz.cvut.supplier/supplierAApplication/service/1}SupplierAPort.http-conduit">
        <http:tlsClientParameters disableCNCheck="true">
            <sec:trustManagers>
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:trustManagers>
        </http:tlsClientParameters>
        <http:authorization>
            <sec:UserName>webuser</sec:UserName>
            <sec:Password>JBoss.123</sec:Password>
            <sec:AuthorizationType>Basic</sec:AuthorizationType>
        </http:authorization>
    </http:conduit>

    <http:conduit name="{http://cz.cvut.supplier/supplierBApplication/service/1}SupplierBPort.http-conduit">
        <http:tlsClientParameters disableCNCheck="true">
            <sec:trustManagers>
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:trustManagers>
            <sec:keyManagers keyPassword="redhat">
                <sec:keyStore type="JKS" password="redhat" file="${location.keystore}keystore.jks"/>
            </sec:keyManagers>
        </http:tlsClientParameters>
    </http:conduit>

    <!-- AMQ -->
    <bean id="jmsConnectionFactory"
          class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="discovery:(fabric:masterslave)" />
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
    </bean>

    <bean id="pooledConnectionFactory"
          class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="maxConnections" value="8" />
        <!--<property name="maximumActive" value="500" />-->
        <property name="connectionFactory" ref="jmsConnectionFactory" />
    </bean>

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="transacted" value="false"/>
        <property name="concurrentConsumers" value="10"/>
    </bean>

    <bean id="activemq"
          class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>
    <!-- AMQ end -->

    <!-- JDBC -->
    <bean id="inventoryDB" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:tcp://localhost/~/exam"/>
        <property name="username" value="sa"/>
        <property name="password" value="sa"/>
    </bean>

    <!-- configure the Camel SQL component to use the JDBC data source -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="inventoryDB"/>
    </bean>
    <!-- JDBC end -->

</beans>
